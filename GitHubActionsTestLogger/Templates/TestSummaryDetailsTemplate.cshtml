@using System
@using System.Linq
@using GitHubActionsTestLogger.Utils.Extensions
@using Microsoft.VisualStudio.TestPlatform.ObjectModel

@inherits MarkdownRazorTemplate<TestSummaryContext>

@{
    string FormatTestOutcome(TestOutcome outcome) => outcome switch
    {
        TestOutcome.Passed => "🟩",
        TestOutcome.Failed => "🟥",
        _ => "🟨"
    };
}

<table>
    <th width="99999">✓&nbsp;&nbsp;Passed</th>
    <th width="99999">✘&nbsp;&nbsp;Failed</th>
    <th width="99999">↷&nbsp;&nbsp;Skipped</th>
    <th width="99999">∑&nbsp;&nbsp;Total</th>
    <th width="99999">⧗&nbsp;&nbsp;Elapsed</th>
    <tr>
        <td align="center">
            @(Model.TestRunResult.PassedTestCount > 0
                ? Model.TestRunResult.PassedTestCount.ToString()
                : "—")
        </td>
        <td align="center">
            @(Model.TestRunResult.FailedTestCount > 0
                ? Model.TestRunResult.FailedTestCount.ToString()
                : "—")
        </td>
        <td align="center">
            @(Model.TestRunResult.SkippedTestCount > 0
                ? Model.TestRunResult.SkippedTestCount.ToString()
                : "—")
        </td>
        <td align="center">
            @Model.TestRunResult.TotalTestCount
        </td>
        <td align="center">
            @Model.TestRunResult.OverallDuration.ToHumanString()
        </td>
    </tr>
</table>

@{
    var testResults = Model
        .TestRunResult
        .TestResults
        .Where(r =>
            r.Outcome == TestOutcome.Failed ||
            r.Outcome == TestOutcome.Passed && Model.Options.SummaryIncludePassedTests ||
            r.Outcome == TestOutcome.Skipped && Model.Options.SummaryIncludeSkippedTests
        );

    var testResultGroups = testResults
        .GroupBy(r => r.TestCase.GetTypeFullyQualifiedName(), StringComparer.Ordinal)
        .Select(g => new
        {
            TypeFullyQualifiedName = g.Key,
            TypeName = g.First().TestCase.GetTypeMinimallyQualifiedName(),
            TestResults = g
                .OrderByDescending(r => r.Outcome == TestOutcome.Failed)
                .ThenByDescending(r => r.Outcome == TestOutcome.Passed)
                .ThenBy(r => r.TestCase.DisplayName, StringComparer.Ordinal)
                .ToArray()
        })
        .OrderByDescending(g => g.TestResults.Any(r => r.Outcome == TestOutcome.Failed))
        .ThenByDescending(g => g.TestResults.Any(r => r.Outcome == TestOutcome.Passed))
        .ThenBy(g => g.TypeName, StringComparer.Ordinal);
}

@foreach (var testResultGroup in testResultGroups)
{
    var failedTestCount = testResultGroup.TestResults.Count(r => r.Outcome == TestOutcome.Failed);

    <details @(Model.Options.SummaryCompactLayout ? "open" : null)>
        <summary>
            <b>@testResultGroup.TypeName</b>

            @if (failedTestCount > 0)
            {
                @(" ")<i>(@failedTestCount failed)</i>
            }
        </summary>

        @* This adds a margin that is smaller than <br> *@
        <p></p>

        <ul>
            @foreach (var testResult in testResultGroup.TestResults)
            {
                // Use display name if it's different from the fully qualified name,
                // otherwise use the minimally qualified name.
                var testName = !string.Equals(
                    testResult.TestCase.DisplayName,
                    testResult.TestCase.FullyQualifiedName,
                    StringComparison.Ordinal)
                    ? testResult.TestCase.DisplayName
                    : testResult.TestCase.GetMinimallyQualifiedName();

                // Test source permalink
                var filePath = testResult.TryGetSourceFilePath();
                var fileLine = testResult.TryGetSourceLine();
                var url = filePath?.Pipe(p => GitHubWorkflow.TryGenerateFilePermalink(p, fileLine));

                <li>
                    @FormatTestOutcome(testResult.Outcome)

                    @if (!string.IsNullOrWhiteSpace(url))
                    {
                        <a href="@url">@testName</a>
                    }
                    else
                    {
                        @testName
                    }

                    @if (!string.IsNullOrWhiteSpace(testResult.ErrorMessage))
                    {
                        WriteMarkdown(
                            "```yml",
                            testResult.ErrorMessage,
                            testResult.ErrorStackTrace,
                            "```"
                        );
                    }
                </li>
            }
        </ul>
    </details>
}